"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _baseHostNameResolver = _interopRequireDefault(require("../resolver/base-host-name-resolver"));

var _dns = _interopRequireDefault(require("dns"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var NodeHostNameResolver = /*#__PURE__*/function (_BaseHostNameResolver) {
  (0, _inherits2["default"])(NodeHostNameResolver, _BaseHostNameResolver);

  var _super = _createSuper(NodeHostNameResolver);

  function NodeHostNameResolver() {
    (0, _classCallCheck2["default"])(this, NodeHostNameResolver);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(NodeHostNameResolver, [{
    key: "resolve",
    value: function resolve(address) {
      return new Promise(function (resolve) {
        _dns["default"].lookup(address.host(), {
          all: true
        }, function (error, resolvedTo) {
          if (error) {
            resolve([address]);
          } else {
            var resolvedAddresses = resolvedTo.map(function (a) {
              return address.resolveWith(a.address);
            });
            resolve(resolvedAddresses);
          }
        });
      });
    }
  }]);
  return NodeHostNameResolver;
}(_baseHostNameResolver["default"]);

exports["default"] = NodeHostNameResolver;